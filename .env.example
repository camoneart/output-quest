# OUTPUT QUEST 環境変数設定例

# このファイルを参考に .env ファイルを作成し、必要な環境変数を設定してください。
# 各設定項目の詳細や最新情報については、コメントに記載された公式ドキュメントのリンクも参照してください。

# ====================
# アプリケーション設定 (Next.js - App Router)
# ====================
# Next.js (App Router) の環境変数に関する公式ドキュメント:
# - https://nextjs.org/docs/app/building-your-application/configuring/environment-variables

# 開発環境でのベースURL
NEXT_PUBLIC_BASE_URL=http://localhost:3000
# 開発環境での特定の接続先URL
NEXT_PUBLIC_CONNECTION_URL=/connection

# 本番環境でのベースURL
# NEXT_PUBLIC_BASE_URL=https://your-production-domain.com
# 本番環境での特定の接続先URL
# NEXT_PUBLIC_CONNECTION_URL=/connection


# ====================
# Clerk認証設定
# ====================
# Clerk (https://clerk.com/) の認証情報を設定します。
# ClerkのNext.js (App Router対応) 連携に関するドキュメント:
# - https://clerk.com/docs/references/nextjs/overview (App Router/Pages Router共通だが、App Routerでの利用例も含む)
# - https://clerk.com/docs/quickstarts/nextjs (App Routerのクイックスタート)
# Clerkのキーに関するドキュメント:
# - https://clerk.com/docs/security/api-keys

# 開発環境用 (Clerkダッシュボードから取得)
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
CLERK_SECRET_KEY=sk_test_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# 本番環境用 (Clerkダッシュボードから取得)
# NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_live_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# CLERK_SECRET_KEY=sk_live_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


# ====================
# Clerk Webhook設定
# ====================
# Clerk Webhookの署名シークレット (Clerkダッシュボードから取得)
# ClerkのWebhookに関するドキュメント:
# - https://clerk.com/docs/integrations/webhooks/overview
# - https://clerk.com/docs/integrations/webhooks/verifying-requests

# 開発環境用
CLERK_WEBHOOK_SIGNING_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# 本番環境用
# CLERK_WEBHOOK_SIGNING_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


# ====================
# データベース設定（開発環境 / 本番環境：共通）
# ====================
# Supabase PostgreSQL および Supabase Client の設定を行います。
# 実際のプロジェクトIDやパスワード、キーは環境ごとに異なります。

# Supabaseのデータベース接続に関するドキュメント:
# - https://supabase.com/docs/guides/database/connecting-to-postgres
# Prismaのデータベース接続 (環境変数 DATABASE_URL) に関するドキュメント:
# - https://www.prisma.io/docs/orm/overview/databases/postgresql (PostgreSQLの場合)
# - https://www.prisma.io/docs/orm/reference/connection-urls

# Supabase PostgreSQL接続URL (Prisma ORMもこのURLを使用します)
# Session Pooler (ポート6543) を使用する例です。
DATABASE_URL="postgres://postgres.[YOUR_PROJECT_ID]:[YOUR_PASSWORD]@aws-0-[YOUR_REGION].pooler.supabase.com:6543/postgres"


# Supabaseクライアント設定 (主に supabase-js ライブラリ用)
# SupabaseのAPIキーとURLに関するドキュメント (Next.js App Routerでの利用例も含む):
# - https://supabase.com/docs/guides/getting-started/tutorials/with-nextjs
# - https://supabase.com/docs/guides/auth/server-side-rendering (App Router/Pages Router両対応のSSR/SSGガイド)
# - https://supabase.com/docs/guides/api/javascript/getting-started (supabase-jsの基本)
# - https://supabase.com/docs/learn/auth-deep-dive/auth-row-level-security (RLSとキーの役割について)
# -----------------------------------------------------------------------------
# 注意:
# 以下の SUPABASE_KEY には `service_role key` を設定することを想定しています。
# `service_role key` はデータベースの全操作が可能な非常に強力なキーです。
# 必ずサーバーサイドの保護された環境でのみ使用し、
# フロントエンド (ブラウザ側) のコードには絶対に含めないでください。
#
# クライアントサイド (ブラウザ) で Supabase Client を使用する場合は、
# `anon key` (公開鍵) を `NEXT_PUBLIC_SUPABASE_ANON_KEY` のような
# NEXT_PUBLIC_ 接頭辞を付けた変数名で別途設定することを強く推奨します。
#
# 例 (クライアントサイド用):
# NEXT_PUBLIC_SUPABASE_URL="https://[YOUR_PROJECT_ID].supabase.co"
# NEXT_PUBLIC_SUPABASE_ANON_KEY="[YOUR_SUPABASE_ANON_KEY]"
# -----------------------------------------------------------------------------

# SupabaseプロジェクトURL (Supabaseダッシュボードの API Settings > Project URL)
SUPABASE_URL="https://[YOUR_PROJECT_ID].supabase.co"

# Supabase Service Role Key (サーバーサイド専用)
# (Supabaseダッシュボードの API Settings > Project API keys > service_role)
SUPABASE_KEY="[YOUR_SUPABASE_SERVICE_ROLE_KEY]"


# ====================
# LLM 関連設定
# ====================
# Google AI (Gemini) のAPIキーを設定します。
# Google AI Studio: https://makersuite.google.com/app/apikey
# Gemini APIドキュメント: https://ai.google.dev/tutorials/rest_quickstart

# Google AI API Key for Gemini
GOOGLE_GENERATIVE_AI_API_KEY="[YOUR_GOOGLE_AI_API_KEY]"

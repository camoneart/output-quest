---
description: commit-messageの出力設定
globs: src/**/*
alwaysApply: false
---

# Git Commit Message Guideline (Conventional Commits)

```
<type>(<scope>): <subject>

<body>

<footer>
```

- **type**: 下表から選択（必須）
- **scope**: 変更対象の機能・ディレクトリ名など（任意）
- **subject**: 50 字以内、動詞は現在形、文末ピリオド不要（必須）
- **body**: 72 字幅で wrap、変更理由と実装概要を記述（任意）
- **footer**: `BREAKING CHANGE:` や `Closes #123` など（任意）

| type         | 用途                                             |
| ------------ | ------------------------------------------------ |
| **feat**     | ユーザー価値となる新機能の追加                   |
| **fix**      | バグ修正                                         |
| **hotfix**   | クリティカルなバグ修正                           |
| **add**      | 新しいファイルや機能を追加                       |
| **update**   | 既存機能の修正・改善                             |
| **change**   | 仕様変更                                         |
| **clean**    | コードの整理・リファクタリング                   |
| **disable**  | 機能の無効化                                     |
| **remove**   | ファイルや機能を削除                             |
| **upgrade**  | ライブラリやフレームワークのバージョンアップ     |
| **docs**     | ドキュメントのみの変更                           |
| **style**    | フォーマット・スペル修正など動作に影響しない変更 |
| **refactor** | 機能追加・バグ修正を伴わないリファクタリング     |
| **perf**     | パフォーマンス改善                               |
| **test**     | テストコードの追加・修正                         |
| **build**    | ビルドタスク、依存関係、スクリプトの変更         |
| **ci**       | CI 設定・スクリプトの変更                        |
| **chore**    | その他雑多な変更（リファクタ以外）               |
| **revert**   | 以前のコミットを取り消し                         |

## 例

```
feat(auth): ソーシャルログインを追加

GitHub OAuth を利用してユーザー登録の離脱率を改善。
アクセストークン検証は backend.mdc に準拠。

BREAKING CHANGE: /v1/login エンドポイントが JWT 返却形式に変更
Closes #45
```

```
fix(ui): モーダル閉じないバグを修正

- focus trap の解除処理を追加
- Dialog コンポーネントを shadcn/ui v0.3.1 にアップグレード
```

## 運用ルール

1. **完全ピン留め**パッケージのアップグレードは `chore(deps): ...` とし、Dependabot PR を squash & merge する。
2. マージ戦略は **Squash**。タイトルをコミットメッセージとして採用し、本文に PR 内容を自動展開する。
3. `BREAKING CHANGE` を含むコミットは必ず **メジャーバージョンタグ** 付与を検討する。

必ずこのフォーマットを守り、ステージされた変更内容を要約してコミットしてください。
また、コミットメッセージ生成後、ユーザーに対して「この内容でpushして問題ないか？」と叫び、yes/noの選択肢を明示し、ユーザーにpushするかしないかの判断をさせるようにすること。
